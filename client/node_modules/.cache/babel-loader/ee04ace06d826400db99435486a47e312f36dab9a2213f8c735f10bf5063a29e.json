{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Action types\nexport const FETCH_USERS = \"FETCH_USERS\";\nexport const FETCH_USER_BY_ID = \"FETCH_USER_BY_ID\";\nexport const CREATE_USER = \"CREATE_USER\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const DELETE_USER = \"DELETE_USER\";\n\n// usersActions.js\n\n// Action creators\nexport const fetchUsers = () => async dispatch => {\n  try {\n    const response = await axios.get(\"/api/users\"); // Update with your API endpoint\n    dispatch({\n      type: FETCH_USERS,\n      payload: response.data\n    });\n  } catch (error) {\n    // Handle error\n    console.log(error.message);\n  }\n};\n\n// Implement other action creators similarly for other CRUD operations\n// using axios or any other library to make API calls\n\nexport const createUser = createAsyncThunk(\"users/createUser\", async userData => {\n  const response = await axios.post(\"/api/users\", userData);\n  return response.data;\n});\nexport const updateUser = createAsyncThunk(\"users/updateUser\", async _ref => {\n  let {\n    id,\n    userData\n  } = _ref;\n  const response = await axios.put(`/api/users/${id}`, userData);\n  return response.data;\n});\nexport const deleteUser = createAsyncThunk(\"users/deleteUser\", async id => {\n  await axios.delete(`/api/users/${id}`);\n  return id;\n});\n\n// usersReducers.js\n\n// Initial state\nconst initialState = {\n  users: [],\n  user: null\n};\n\n// Users reducer\nexport const usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_USERS:\n      // Implement fetching users from backend\n      // and update state accordingly\n      return state;\n    case FETCH_USER_BY_ID:\n      // Implement fetching user by id from backend\n      // and update state accordingly\n      return state;\n    case CREATE_USER:\n      // Implement creating user in backend\n      // and update state accordingly\n      return state;\n    case UPDATE_USER:\n      // Implement updating user by id in backend\n      // and update state accordingly\n      return state;\n    case DELETE_USER:\n      // Implement deleting user by id in backend\n      // and update state accordingly\n      return state;\n    default:\n      return state;\n  }\n};\n\n// const userSlice = createSlice({\n//   name: \"users\",\n//   initialState: {\n//     data: [],\n//     status: \"idle\",\n//     error: null,\n//   },\n//   reducers: {},\n//   extraReducers: {\n//     [fetchUsers.pending]: (state) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchUsers.fulfilled]: (state, action) => {\n//       state.status = \"succeeded\";\n//       state.data = action.payload;\n//     },\n//     [fetchUsers.rejected]: (state, action) => {\n//       state.status = \"failed\";\n//       state.error = action.error.message;\n//     },\n//     [createUser.fulfilled]: (state, action) => {\n//       state.data.push(action.payload);\n//     },\n//     [updateUser.fulfilled]: (state, action) => {\n//       const { id, userData } = action.meta.arg;\n//       const userIndex = state.data.findIndex((user) => user.id === id);\n//       if (userIndex !== -1) {\n//         state.data[userIndex] = { ...state.data[userIndex], ...userData };\n//       }\n//     },\n//     [deleteUser.fulfilled]: (state, action) => {\n//       const id = action.payload;\n//       state.data = state.data.filter((user) => user.id !== id);\n//     },\n//   },\n// });\n\n// export default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","axios","FETCH_USERS","FETCH_USER_BY_ID","CREATE_USER","UPDATE_USER","DELETE_USER","fetchUsers","dispatch","response","get","type","payload","data","error","console","log","message","createUser","userData","post","updateUser","_ref","id","put","deleteUser","delete","initialState","users","user","usersReducer","state","arguments","length","undefined","action"],"sources":["/Users/ahmeddawod/Desktop/assessment/client/src/redux/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Action types\nexport const FETCH_USERS = \"FETCH_USERS\";\nexport const FETCH_USER_BY_ID = \"FETCH_USER_BY_ID\";\nexport const CREATE_USER = \"CREATE_USER\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const DELETE_USER = \"DELETE_USER\";\n\n// usersActions.js\n\n// Action creators\nexport const fetchUsers = () => async (dispatch) => {\n  try {\n    const response = await axios.get(\"/api/users\"); // Update with your API endpoint\n    dispatch({ type: FETCH_USERS, payload: response.data });\n  } catch (error) {\n    // Handle error\n    console.log(error.message);\n  }\n};\n\n// Implement other action creators similarly for other CRUD operations\n// using axios or any other library to make API calls\n\nexport const createUser = createAsyncThunk(\n  \"users/createUser\",\n  async (userData) => {\n    const response = await axios.post(\"/api/users\", userData);\n    return response.data;\n  }\n);\n\nexport const updateUser = createAsyncThunk(\n  \"users/updateUser\",\n  async ({ id, userData }) => {\n    const response = await axios.put(`/api/users/${id}`, userData);\n    return response.data;\n  }\n);\n\nexport const deleteUser = createAsyncThunk(\"users/deleteUser\", async (id) => {\n  await axios.delete(`/api/users/${id}`);\n  return id;\n});\n\n// usersReducers.js\n\n// Initial state\nconst initialState = {\n  users: [],\n  user: null,\n};\n\n// Users reducer\nexport const usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS:\n      // Implement fetching users from backend\n      // and update state accordingly\n      return state;\n    case FETCH_USER_BY_ID:\n      // Implement fetching user by id from backend\n      // and update state accordingly\n      return state;\n    case CREATE_USER:\n      // Implement creating user in backend\n      // and update state accordingly\n      return state;\n    case UPDATE_USER:\n      // Implement updating user by id in backend\n      // and update state accordingly\n      return state;\n    case DELETE_USER:\n      // Implement deleting user by id in backend\n      // and update state accordingly\n      return state;\n    default:\n      return state;\n  }\n};\n\n// const userSlice = createSlice({\n//   name: \"users\",\n//   initialState: {\n//     data: [],\n//     status: \"idle\",\n//     error: null,\n//   },\n//   reducers: {},\n//   extraReducers: {\n//     [fetchUsers.pending]: (state) => {\n//       state.status = \"loading\";\n//     },\n//     [fetchUsers.fulfilled]: (state, action) => {\n//       state.status = \"succeeded\";\n//       state.data = action.payload;\n//     },\n//     [fetchUsers.rejected]: (state, action) => {\n//       state.status = \"failed\";\n//       state.error = action.error.message;\n//     },\n//     [createUser.fulfilled]: (state, action) => {\n//       state.data.push(action.payload);\n//     },\n//     [updateUser.fulfilled]: (state, action) => {\n//       const { id, userData } = action.meta.arg;\n//       const userIndex = state.data.findIndex((user) => user.id === id);\n//       if (userIndex !== -1) {\n//         state.data[userIndex] = { ...state.data[userIndex], ...userData };\n//       }\n//     },\n//     [deleteUser.fulfilled]: (state, action) => {\n//       const id = action.payload;\n//       state.data = state.data.filter((user) => user.id !== id);\n//     },\n//   },\n// });\n\n// export default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,WAAW,GAAG,aAAa;;AAExC;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAChDF,QAAQ,CAAC;MAAEG,IAAI,EAAET,WAAW;MAAEU,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC;EAC5B;AACF,CAAC;;AAED;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGlB,gBAAgB,CACxC,kBAAkB,EAClB,MAAOmB,QAAQ,IAAK;EAClB,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACmB,IAAI,CAAC,YAAY,EAAED,QAAQ,CAAC;EACzD,OAAOV,QAAQ,CAACI,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMQ,UAAU,GAAGrB,gBAAgB,CACxC,kBAAkB,EAClB,MAAAsB,IAAA,IAA4B;EAAA,IAArB;IAAEC,EAAE;IAAEJ;EAAS,CAAC,GAAAG,IAAA;EACrB,MAAMb,QAAQ,GAAG,MAAMR,KAAK,CAACuB,GAAG,CAAE,cAAaD,EAAG,EAAC,EAAEJ,QAAQ,CAAC;EAC9D,OAAOV,QAAQ,CAACI,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMY,UAAU,GAAGzB,gBAAgB,CAAC,kBAAkB,EAAE,MAAOuB,EAAE,IAAK;EAC3E,MAAMtB,KAAK,CAACyB,MAAM,CAAE,cAAaH,EAAG,EAAC,CAAC;EACtC,OAAOA,EAAE;AACX,CAAC,CAAC;;AAEF;;AAEA;AACA,MAAMI,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAEQ,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACvD,QAAQC,MAAM,CAACxB,IAAI;IACjB,KAAKT,WAAW;MACd;MACA;MACA,OAAO6B,KAAK;IACd,KAAK5B,gBAAgB;MACnB;MACA;MACA,OAAO4B,KAAK;IACd,KAAK3B,WAAW;MACd;MACA;MACA,OAAO2B,KAAK;IACd,KAAK1B,WAAW;MACd;MACA;MACA,OAAO0B,KAAK;IACd,KAAKzB,WAAW;MACd;MACA;MACA,OAAOyB,KAAK;IACd;MACE,OAAOA,KAAK;EAAC;AAEnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}